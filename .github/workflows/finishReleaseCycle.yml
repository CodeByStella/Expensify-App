name: Finish release cycle

on:
  issues:
    types: [closed]

# The updateProduction and createNewStagingDeployCash jobs are executed when a StagingDeployCash is closed.
jobs:
  validate:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'StagingDeployCash')
    outputs:
      isValid: ${{ fromJSON(steps.isDeployer.outputs.IS_DEPLOYER) && !fromJSON(steps.checkDeployBlockers.outputs.HAS_DEPLOY_BLOCKERS) }}
    steps:
      - name: Checkout
        # v4
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          ref: main
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Setup git for OSBotify
        uses: Expensify/GitHub-Actions/setupGitForOSBotify@main
        id: setupGitForOSBotify
        with:
          OP_VAULT: ${{ vars.OP_VAULT }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OS_BOTIFY_APP_ID: ${{ secrets.OS_BOTIFY_APP_ID }}
          OS_BOTIFY_PRIVATE_KEY: ${{ secrets.OS_BOTIFY_PRIVATE_KEY }}

      - name: Validate actor is deployer
        id: isDeployer
        run: |
          if gh api /orgs/Expensify/teams/mobile-deployers/memberships/${{ github.actor }} --silent; then
            echo "IS_DEPLOYER=true" >> "$GITHUB_OUTPUT"
          else
            echo "IS_DEPLOYER=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}

      - name: Reopen and comment on issue (not a team member)
        if: ${{ !fromJSON(steps.isDeployer.outputs.IS_DEPLOYER) }}
        uses: ./.github/actions/javascript/reopenIssueWithComment
        with:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT: |
            Sorry, only members of @Expensify/Mobile-Deployers can close deploy checklists.
            Reopening!

      - name: Check for any deploy blockers
        if: ${{ fromJSON(steps.isDeployer.outputs.IS_DEPLOYER) }}
        id: checkDeployBlockers
        uses: ./.github/actions/javascript/checkDeployBlockers
        with:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Reopen and comment on issue (has blockers)
        if: ${{ fromJSON(steps.isDeployer.outputs.IS_DEPLOYER) && fromJSON(steps.checkDeployBlockers.outputs.HAS_DEPLOY_BLOCKERS || 'false') }}
        uses: ./.github/actions/javascript/reopenIssueWithComment
        with:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          COMMENT: |
            This issue either has unchecked items or has not yet been marked with the `:shipit:` emoji of approval.
            Reopening!

      - name: Announce failed workflow in Slack
        if: ${{ failure() }}
        uses: ./.github/actions/composite/announceFailedWorkflowInSlack
        with:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  checkAndUpdateVersion:
    name: Check and update version if production is greater than staging
    needs: validate
    if: fromJSON(needs.validate.outputs.isValid)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        # v4
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          ref: main
          token: ${{ secrets.OS_BOTIFY_TOKEN }}

      - name: Setup git for OSBotify
        uses: Expensify/GitHub-Actions/setupGitForOSBotify@main
        id: setupGitForOSBotify
        with:
          OP_VAULT: ${{ vars.OP_VAULT }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          OS_BOTIFY_APP_ID: ${{ secrets.OS_BOTIFY_APP_ID }}
          OS_BOTIFY_PRIVATE_KEY: ${{ secrets.OS_BOTIFY_PRIVATE_KEY }}

      - name: Fetch versions and compare
        id: compare_versions
        run: |
          PROD_VERSION=$(gh release list --repo ${{ github.repository }} --limit 1 --exclude-pre-releases --json tagName -q 'map(.tagName) | .[0]')
          STAGING_VERSION=$(gh release list --repo ${{ github.repository }} --json tagName,isPrerelease,createdAt -q 'map(select(.isPrerelease)) | sort_by(.createdAt) | last | .tagName // \"\"' )

          # Compare versions
          if [ "$(printf '%s\\n%s' "$PROD_VERSION" "$STAGING_VERSION" | sort -V | head -n1)" = "$STAGING_VERSION" ] && [ "$PROD_VERSION" != "$STAGING_VERSION" ]; then
            echo "Staging version ($STAGING_VERSION) is lower than production version ($PROD_VERSION). Needs update."
            echo "needs_update=true" >> "$GITHUB_OUTPUT"
          else
            echo "Staging version ($STAGING_VERSION) is not lower than production version ($PROD_VERSION)."
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}

      - name: Create New Patch Version if Needed
        id: create_version
        if: steps.compare_versions.outputs.needs_update == 'true'
        uses: ./.github/workflows/createNewVersion.yml
        secrets: inherit
        with:
          SEMVER_LEVEL: PATCH

      - name: Comment on Issue if Version Updated
        if: steps.create_version.outputs.NEW_VERSION
        run: gh issue comment ${{ github.event.issue.number }} --repo ${{ github.repository }} --body "FYI - The current staging release version (${{ steps.compare_versions.outputs.staging_version }}) is currently lower than the current production version (${{ steps.compare_versions.outputs.prod_version }}) due to a CP to production, so I've updated the version to ${{ steps.create_version.outputs.NEW_VERSION }}."
        env:
          GITHUB_TOKEN: ${{ steps.setupGitForOSBotify.outputs.OS_BOTIFY_API_TOKEN }}

  # Update the production branch to trigger the production deploy.
  updateProduction:
    needs: [validate, checkAndUpdateVersion]
    uses: ./.github/workflows/updateProtectedBranch.yml
    secrets: inherit
    with:
      TARGET_BRANCH: production

  # Remove DeployBlockerCash label from issues that had it since we just deployed production
  cleanupDeployBlockers:
    needs: updateProduction
    runs-on: ubuntu-latest
    steps:
      - run: |
          gh issue list \
            --repo 'Expensify/App' \
            --state all \
            --label DeployBlockerCash \
            --json number \
            --jq '.[].number' \
            | xargs -L1 -I {} --max-procs=4 gh issue edit {} --repo 'Expensify/App' --remove-label DeployBlockerCash
        env:
          GITHUB_TOKEN: ${{ github.token }}

  # Create a new patch version to prep for next release cycle
  createNewPatchVersion:
    needs: validate
    if: ${{ fromJSON(needs.validate.outputs.isValid) }}
    uses: ./.github/workflows/createNewVersion.yml
    secrets: inherit
    with:
      SEMVER_LEVEL: PATCH

  # Update the staging branch to trigger a staging deploy
  updateStaging:
    needs: [cleanupDeployBlockers, createNewPatchVersion]
    uses: ./.github/workflows/updateProtectedBranch.yml
    secrets: inherit
    with:
      TARGET_BRANCH: staging
